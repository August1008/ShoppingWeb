@using ShoppingWeb.Web.Pages.Utilities;
<div class="toast @(IsVisible? "show":"")" style="--notificationcolor:@(Message == NotificationMessage.SuccessDeleteItemMessage ? "green":"red")" role="alert" aria-live="assertive" aria-atomic="true">
    <div class="toast-header">
        <img src="#" class="rounded me-2" alt="...">
        <strong class="me-auto">Notification</strong>
        <small class="text-muted">11 mins ago</small>
        <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
    </div>
    <div class="toast-body">
        @Message
    </div>
</div>
@code {
    public bool IsVisible { get; set; } = false;
    public string Message { get; set; } = string.Empty;

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    if (!firstRender)
    //    {
    //        await Task.Delay(2000).ContinueWith(_ => { IsVisible = false; });
    //    }
    //}

    private void ShowNotify(string message)
    {
        IsVisible = true;
        Message = message;
        StateHasChanged();

        // Hide the notification after a delay
        Task.Delay(1500).ContinueWith(_ => { IsVisible = false; StateHasChanged(); });
    }

    public void ShowSuccessDeleteNotification()
    {
        ShowNotify(NotificationMessage.SuccessDeleteItemMessage);
    }

    public void ShowFailureDeleteNotification()
    {
        ShowNotify(NotificationMessage.FailureDeleteItemMessage);
    }
}
